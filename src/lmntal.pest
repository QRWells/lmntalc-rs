COMMENT    = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" | "//" ~ (!"\n" ~ ANY)* }
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

Program = { SOI ~ WorldProcessList ~ EOI }

WorldProcessList = { (Rule | DeclarationList) ~ (";" ~ (Rule | DeclarationList))* ~ ";"? }

DeclarationList = { Declaration ~ ("," ~ Declaration)* }
Declaration     = { UnitAtom | Context }
UnitAtom        = { Membrane | Atom | Link }
Atom            = { AtomName ~ ("(" ~ DeclarationList ~ ")")? }
Link            = { LinkName }
Membrane        = { AtomName? ~ "{" ~ WorldProcessList ~ "}" }

AtomName = @{
    (ASCII_ALPHA_LOWER ~ (ASCII_ALPHANUMERIC | "_")*)
  | Float
  | Int
}
LinkName = @{
    (ASCII_ALPHA_UPPER | "_") ~ (ASCII_ALPHANUMERIC | "_")*
}

Context = @{ "$" ~ AtomName }

// Rule rules

RuleName = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
Rule     =  { (RuleName ~ ":")? ~ Pattern ~ Case ~ (";" ~ Case)* }
Case     =  { ((WHEN ~ Guard ~ ";") ~ (WITH ~ VarGuard ~ ";")?)* ~ THEN ~ Body }
Body     =  { DeclarationList? }
Pattern  =  { DeclarationList }
WHEN     = @{ "when" }
WITH     = @{ "with" }
THEN     = @{ "then" }

// Guard rules

GuardAtom  = _{ GuardUnit | "(" ~ Guard ~ ")" }
MulDivExpr =  { GuardAtom ~ ((MUL | DIV | MOD) ~ GuardAtom)* }
AddSubExpr =  { MulDivExpr ~ ((ADD | SUB) ~ MulDivExpr)* }
RelExpr    =  { AddSubExpr ~ ((LE | LT | GE | GT | EQ | NE) ~ AddSubExpr)? }
AndExpr    =  { (RelExpr | GuardFuncConstraint) ~ (AND ~ (RelExpr | GuardFuncConstraint))* }
OrExpr     =  { AndExpr ~ (OR ~ AndExpr)* }
Guard      =  { OrExpr }

TempVar    = @{ ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "_")* }
AssignExpr =  { TempVar ~ ":=" ~ AddSubExpr }
VarGuard   =  { AssignExpr ~ ("," ~ AssignExpr)* }

GuardFunctorList    =  { GuardFunctor ~ ("," ~ GuardFunctor)* }
GuardFunctor        = @{ Context | ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "_")* }
GuardUnit           = _{ GuardFunctor | Float | Int }
GuardFuncConstraint =  { GuardFunc ~ "(" ~ GuardFunctorList ~ ")" }
GuardFunc           = _{ GuardInt | GuardFloat | GuardString | GuardGround | GuardUniq | GuardUnary }
GuardUnary          =  { "unary" }
GuardInt            =  { "int" }
GuardFloat          =  { "float" }
GuardString         =  { "string" }
GuardGround         =  { "ground" }
GuardUniq           =  { "uniq" }

// Basic rules

Int   = @{ ASCII_DIGIT+ | "0x" ~ ASCII_HEX_DIGIT+ }
Float = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }

// Operators

ADD = { "+" }
SUB = { "-" }
MUL = { "*" }
DIV = { "/" }
MOD = { "%" }
LE  = { "<=" }
LT  = { "<" }
GE  = { ">=" }
GT  = { ">" }
EQ  = { "==" }
NE  = { "!=" }
AND = { "&&" }
OR  = { "||" }
